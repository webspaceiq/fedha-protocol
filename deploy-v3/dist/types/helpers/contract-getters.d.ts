import { StakedTokenTransferStrategy } from "./../typechain";
import { PullRewardsTransferStrategy } from "./../typechain";
import { AaveOracle, ACLManager, AToken, BorrowLogic, BridgeLogic, EModeLogic, FlashLoanLogic, IERC20Detailed, LiquidationLogic, MockInitializableImple, MockInitializableImpleV2, Pool, PoolAddressesProvider, PoolConfigurator, PriceOracle, StableDebtToken, SupplyLogic, VariableDebtToken, WETH9, WETH9Mocked, AaveProtocolDataProvider, MintableERC20, DefaultReserveInterestRateStrategy, MockFlashLoanReceiver, PoolAddressesProviderRegistry, ReservesSetupHelper, MockVariableDebtToken, MockStableDebtToken, MockPool, ERC20Faucet, WrappedTokenGatewayV3, UiPoolDataProviderV3, WalletBalanceProvider, UiIncentiveDataProviderV3 } from "../typechain";
import { tEthereumAddress } from "./types";
import { RewardsController } from "../typechain";
import { StakedTokenV2Rev3 } from "../typechain";
import { Libraries } from "hardhat-deploy/dist/types";
import { EmissionManager } from "../typechain";
export declare const getAToken: (address: tEthereumAddress) => Promise<AToken>;
export declare const getVariableDebtToken: (address: tEthereumAddress) => Promise<VariableDebtToken>;
export declare const getStableDebtToken: (address: tEthereumAddress) => Promise<StableDebtToken>;
export declare const getERC20: (address: tEthereumAddress) => Promise<IERC20Detailed>;
export declare const getWETH: (address: tEthereumAddress) => Promise<WETH9>;
export declare const getPoolAddressesProvider: (address?: tEthereumAddress) => Promise<PoolAddressesProvider>;
export declare const getACLManager: (address?: tEthereumAddress) => Promise<ACLManager>;
export declare const getPoolConfiguratorProxy: (address?: tEthereumAddress) => Promise<PoolConfigurator>;
export declare const getSupplyLogic: (address?: tEthereumAddress) => Promise<SupplyLogic>;
export declare const getBridgeLogic: (address?: tEthereumAddress) => Promise<BridgeLogic>;
export declare const getBorrowLogic: (address?: tEthereumAddress) => Promise<BorrowLogic>;
export declare const getLiquidationLogic: (address?: tEthereumAddress) => Promise<LiquidationLogic>;
export declare const getEModeLogic: (address?: tEthereumAddress) => Promise<EModeLogic>;
export declare const getFlashLoanLogic: (address?: tEthereumAddress) => Promise<FlashLoanLogic>;
export declare const getPool: (address?: tEthereumAddress) => Promise<Pool>;
export declare const getPriceOracle: (address?: tEthereumAddress) => Promise<AaveOracle>;
export declare const getIRStrategy: (address: tEthereumAddress) => Promise<DefaultReserveInterestRateStrategy>;
export declare const getMintableERC20: (address: tEthereumAddress) => Promise<MintableERC20>;
export declare const getIErc20Detailed: (address: tEthereumAddress) => Promise<IERC20Detailed>;
export declare const getAaveProtocolDataProvider: (address?: tEthereumAddress) => Promise<AaveProtocolDataProvider>;
export declare const getAaveOracle: (address?: tEthereumAddress) => Promise<AaveOracle>;
export declare const getFallbackOracle: (address?: tEthereumAddress) => Promise<PriceOracle>;
export declare const getMockFlashLoanReceiver: (address?: tEthereumAddress) => Promise<MockFlashLoanReceiver>;
export declare const getPoolAddressesProviderRegistry: (address?: tEthereumAddress) => Promise<PoolAddressesProviderRegistry>;
export declare const getReservesSetupHelper: (address?: tEthereumAddress) => Promise<ReservesSetupHelper>;
export declare const getWETHMocked: (address?: tEthereumAddress) => Promise<WETH9Mocked>;
export declare const getMockVariableDebtToken: (address: tEthereumAddress) => Promise<MockVariableDebtToken>;
export declare const getMockStableDebtToken: (address: tEthereumAddress) => Promise<MockStableDebtToken>;
export declare const getMockPool: (address?: tEthereumAddress) => Promise<MockPool>;
export declare const getMockL2Pool: (address?: tEthereumAddress) => Promise<MockPool>;
export declare const getMockInitializableImple: (address?: tEthereumAddress) => Promise<MockInitializableImple>;
export declare const getMockInitializableImpleV2: (address?: tEthereumAddress) => Promise<MockInitializableImpleV2>;
export declare const getPoolLibraries: () => Promise<Libraries>;
export declare const getTestnetReserveAddressFromSymbol: (symbol: string) => Promise<string>;
export declare const getERC20Faucet: (address?: string) => Promise<ERC20Faucet>;
export declare const getWrappedTokenGateway: (address?: string) => Promise<WrappedTokenGatewayV3>;
export declare const getUiPoolDataProvider: (address?: string) => Promise<UiPoolDataProviderV3>;
export declare const getUiIncentiveDataProvider: (address?: string) => Promise<UiIncentiveDataProviderV3>;
export declare const getWalletBalanceProvider: (address?: string) => Promise<WalletBalanceProvider>;
export declare const getIncentivesV2: (address?: string) => Promise<RewardsController>;
export declare const getPullRewardsStrategy: (address?: string) => Promise<PullRewardsTransferStrategy>;
export declare const getStakedRewardsStrategy: (address?: string) => Promise<StakedTokenTransferStrategy>;
export declare const getStakeAave: (address?: string) => Promise<StakedTokenV2Rev3>;
export declare const getL2Encoder: (address?: tEthereumAddress) => Promise<import("ethers").Contract>;
export declare const getEmissionManager: (address?: tEthereumAddress) => Promise<EmissionManager>;
